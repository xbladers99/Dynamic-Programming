#include<bits/stdc++.h>
using namespace std;
int memo[100][100];

int find(int arr[],int i,int j,int sum)
{
    if(i+1 == j)
        return max(arr[i],arr[j]);
    if(memo[i][j]!= -1)
        return memo[i][j];
        
    memo[i][j] = max(sum - find(arr, i+1, j, sum - arr[i]), sum - find(arr, i, j-1, sum - arr[j]));
    
    return memo[i][j];
}

struct element
{
    int val;
    int sum;
};

int find_bottomup(int arr[],int n,int sum)
{
    element dp[n][n];
    int i,j;
    for(i=0;i<n-1;i++)
    {
        dp[i][i+1].val = max(arr[i],arr[i+1]);
        dp[i][i+1].sum = arr[i] + arr[i+1];
    }
    
    for(int gap = 2;gap<n;gap++)
    {
        for(i=0,j=gap; j<n; i++,j++)
        {
            dp[i][j].sum = arr[j] + dp[i][j-1].sum;
            dp[i][j].val = max(dp[i][j].sum - dp[i+1][j].val, dp[i][j].sum - dp[i][j-1].val);
        }
    }
    
    return dp[0][n-1].val;
}

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        int arr[n];
        int i;
        int sum = 0;
        for(i=0;i<n;i++)
        {
            cin>>arr[i];
            sum += arr[i];
        }
        for(i=0;i<100;i++)
            for(int j=0;j<100;j++)
                memo[i][j] = -1;
        
        //cout<<find(arr,0,n-1,sum)<<endl;
        cout<<find_bottomup(arr,n,sum)<<endl;
    }
	return 0;
}
